name: Build and Upload APK

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'

      - name: Install dependencies
        run: flutter pub get

      - name: Patch ar_flutter_plugin build.gradle
        run: |
          # Locate ar_flutter_plugin version 0.7.3 in .pub-cache
          PLUGIN_PATH=$(find ~/.pub-cache/hosted -type d -name "ar_flutter_plugin-0.7.3" | head -n 1)
          if [ -n "$PLUGIN_PATH" ]; then
            BUILD_GRADLE="$PLUGIN_PATH/android/build.gradle"
            echo "Found ar_flutter_plugin at: $PLUGIN_PATH"
            echo "Checking for build.gradle at: $BUILD_GRADLE"
            if [ -f "$BUILD_GRADLE" ]; then
              echo "Original build.gradle content:"
              cat "$BUILD_GRADLE"
              # 1. Add namespace if not present
              if ! grep -q "namespace" "$BUILD_GRADLE"; then
                MANIFEST="$PLUGIN_PATH/android/src/main/AndroidManifest.xml"
                if [ -f "$MANIFEST" ]; then
                  PACKAGE=$(grep -o 'package="[^"]*"' "$MANIFEST" | cut -d'"' -f2)
                  if [ -n "$PACKAGE" ]; then
                    echo "Adding namespace '$PACKAGE' to $BUILD_GRADLE"
                    sed -i '/android {/a \    namespace "'"$PACKAGE"'"' "$BUILD_GRADLE"
                  else
                    echo "Could not find package in $MANIFEST"
                    exit 1
                  fi
                else
                  echo "AndroidManifest.xml not found at $MANIFEST"
                  exit 1
                fi
              else
                echo "Namespace already defined in $BUILD_GRADLE"
              fi
              # 2. Update Kotlin Gradle plugin version to 1.9.0
              echo "Attempting to update Kotlin Gradle plugin version..."
              if grep -q "kotlin-gradle-plugin" "$BUILD_GRADLE"; then
                echo "Found kotlin-gradle-plugin, replacing version with 1.9.0"
                sed -i 's/kotlin-gradle-plugin:[0-1]\.[0-9]\.[0-9]\{1,2\}/kotlin-gradle-plugin:1.9.0/g' "$BUILD_GRADLE"
                if grep -q "kotlin-gradle-plugin:1.3.50" "$BUILD_GRADLE"; then
                  echo "WARNING: Replacement failed, 1.3.50 still present"
                else
                  echo "Kotlin version updated successfully"
                fi
              else
                echo "No kotlin-gradle-plugin found, adding it to buildscript"
                if grep -q "buildscript {" "$BUILD_GRADLE"; then
                  sed -i '/buildscript {/a \    dependencies {\n        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0"\n    }' "$BUILD_GRADLE"
                else
                  echo "Adding full buildscript block"
                  echo -e "buildscript {\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0\"\n    }\n}\n$(cat $BUILD_GRADLE)" > "$BUILD_GRADLE.tmp" && mv "$BUILD_GRADLE.tmp" "$BUILD_GRADLE"
                fi
              fi
              echo "Modified build.gradle content:"
              cat "$BUILD_GRADLE"
            else
              echo "build.gradle not found at $BUILD_GRADLE"
              exit 1
            fi
          else
            echo "ar_flutter_plugin version 0.7.3 not found in .pub-cache"
            exit 1
          fi

      - name: Clear Gradle and Flutter Caches
        run: |
          echo "Clearing Gradle cache..."
          rm -rf ~/.gradle/caches/
          echo "Clearing Flutter build cache..."
          flutter clean

      - name: Re-install dependencies
        run: flutter pub get

      - name: Patch arcore_flutter_plugin build.gradle
        run: |
          PLUGIN_PATH=$(find ~/.pub-cache/hosted -type d -name "arcore_flutter_plugin-*" | head -n 1)
          if [ -n "$PLUGIN_PATH" ]; then
            BUILD_GRADLE="$PLUGIN_PATH/android/build.gradle"
            echo "Found arcore_flutter_plugin at $PLUGIN_PATH"
            if [ -f "$BUILD_GRADLE" ]; then
              if ! grep -q "namespace" "$BUILD_GRADLE"; then
                MANIFEST="$PLUGIN_PATH/android/src/main/AndroidManifest.xml"
                if [ -f "$MANIFEST" ]; then
                  PACKAGE=$(grep -o 'package="[^"]*"' "$MANIFEST" | cut -d'"' -f2)
                  if [ -n "$PACKAGE" ]; then
                    echo "Adding namespace '$PACKAGE' to $BUILD_GRADLE"
                    if ! grep -q "android {" "$BUILD_GRADLE"; then
                      echo "No android block found, adding one"
                      echo -e "android {\n    namespace \"$PACKAGE\"\n}" >> "$BUILD_GRADLE"
                    else
                      sed -i '/android {/a \    namespace "'"$PACKAGE"'"' "$BUILD_GRADLE"
                    fi
                    cat "$BUILD_GRADLE"
                  else
                    echo "Error: Could not find package in $MANIFEST"
                    exit 1
                  fi
                else
                  echo "Error: AndroidManifest.xml not found at $MANIFEST"
                  exit 1
                fi
              else
                echo "Namespace already defined in $BUILD_GRADLE"
              fi
            else
              echo "Error: build.gradle not found at $BUILD_GRADLE"
              exit 1
            fi
          else
            echo "Error: arcore_flutter_plugin not found in .pub-cache"
            exit 1
          fi

      - name: Build APK
        run: flutter build apk --release

      - name: Debug APK Path
        run: ls -al build/app/outputs/flutter-apk/

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk